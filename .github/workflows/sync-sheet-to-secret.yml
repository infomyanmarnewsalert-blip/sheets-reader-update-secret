name: Sync Google Sheet to GitHub Secret (Hub A -> Target B)

on:
  workflow_dispatch: {}   # 手動実行
  repository_dispatch:
    types: [sheet_updated]   # ← GAS からのイベント

permissions:
  contents: read
  actions: write   # gh api 等に必要

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Show gh version (debug)
        run: gh --version

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install gspread google-auth

      - name: Read all emails from Sheet1!A:A (comma-joined)
        id: read
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          SHEET_ID:    ${{ github.event.client_payload.sheet_id    || secrets.SHEET_ID }}
          SHEET_RANGE: ${{ github.event.client_payload.sheet_range || 'emails!A:A' }}
        run: |
          python - <<'PY'
          import os, json
          import gspread
          from google.oauth2.service_account import Credentials

          creds_info = json.loads(os.environ["GOOGLE_CREDENTIALS"])
          scopes = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
          creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
          gc = gspread.authorize(creds)

          sh = gc.open_by_key(os.environ["SHEET_ID"])
          rng = os.environ.get("SHEET_RANGE", "emails!A:A")

          if "!" in rng:
              ws_name, cell_range = rng.split("!", 1)
              ws = sh.worksheet(ws_name)
          else:
              ws = sh.sheet1
              cell_range = rng

          values = ws.get(cell_range)  # [[val1],[val2],...]
          emails = [row[0].strip() for row in values if row and row[0].strip()]

          joined = ",".join(emails)
          with open("secret_value.txt", "wb") as f:
              f.write(joined.encode("utf-8"))
          PY

      - name: Update Secret in TARGET repo (B, environment-scoped)
        env:
          GH_TOKEN: ${{ secrets.PAT_FOR_SECRETS }}  # gh が使うトークン（BのSecrets RW権限）
          ENV_NAME: ${{ github.event.client_payload.target_env || secrets.TARGET_ENV || 'production' }}
          TARGET_OWNER: ${{ github.event.client_payload.target_owner || secrets.TARGET_OWNER || github.repository_owner }}
          TARGET_REPO:  ${{ github.event.client_payload.target_repo  || secrets.TARGET_REPO  }}
          SECRET_NAME:  ${{ github.event.client_payload.secret_name  || secrets.SECRET_NAME  }}
        run: |
          test -n "$TARGET_REPO" || { echo "TARGET_REPO is empty"; exit 1; }
          test -n "$SECRET_NAME" || { echo "SECRET_NAME is empty"; exit 1; }
          test -n "$ENV_NAME"    || { echo "ENV_NAME is empty"; exit 1; }

          # 環境スコープのSecretを更新
          cat secret_value.txt | gh secret set "$SECRET_NAME" \
            --env "$ENV_NAME" \
            -R "$TARGET_OWNER/$TARGET_REPO"

  notify:
    name: Slack notify (GAS diff only)
    runs-on: ubuntu-latest
    needs: sync
    if: always()
    steps:
      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq coreutils

      - name: Fetch workflow logs (only on failure)
        if: needs.sync.result != 'success'
        id: logs
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          gh api -H 'Accept: application/vnd.github+json' \
            "/repos/${REPO}/actions/runs/${{ github.run_id }}/logs" > logs.zip
          mkdir -p logs && unzip -o logs.zip -d logs >/dev/null || true
          find logs -type f -name '*.txt' -print0 | xargs -0 cat > full_logs.txt || true
          tail -c 35000 full_logs.txt > logs_tail.txt || true
          echo "logfile=logs_tail.txt" >> "$GITHUB_OUTPUT"

      - name: Prepare Slack payload
        id: payload
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          CLIENT_PAYLOAD: ${{ toJson(github.event.client_payload) }}
        run: |
          set -euo pipefail
          test -n "${SLACK_WEBHOOK_URL:-}" || { echo "SLACK_WEBHOOK_URL is empty"; exit 1; }

          STATUS="${{ needs.sync.result }}"
          REPO="${{ github.repository }}"
          RUN="#${{ github.run_number }}"
          URL="https://github.com/${REPO}/actions/runs/${{ github.run_id }}"
          EVENT="${{ github.event_name }}"

          if [ "$STATUS" = "success" ]; then
            # 必ず GAS の差分を利用
            ADDED_LIST="$(printf '%s' "$CLIENT_PAYLOAD" | jq -r '.added_emails // [] | .[:50] | join("\n")')"
            REMOVED_LIST="$(printf '%s' "$CLIENT_PAYLOAD" | jq -r '.removed_emails // [] | .[:50] | join("\n")')"
            ADDED_CNT="$(printf '%s' "$CLIENT_PAYLOAD" | jq -r '(.added_emails // []) | length')"
            REMOVED_CNT="$(printf '%s' "$CLIENT_PAYLOAD" | jq -r '(.removed_emails // []) | length')"
            COUNT="$(printf '%s' "$CLIENT_PAYLOAD" | jq -r '(.total_count // 0)')"

            jq -n \
              --arg t "✅ *SUCCESS* — ${REPO} ${RUN}\n*Total:* ${COUNT}\n*Added:* ${ADDED_CNT}  *Removed:* ${REMOVED_CNT}" \
              --arg added "$ADDED_LIST" \
              --arg removed "$REMOVED_LIST" \
              '{
                blocks: [
                  {type:"section", text:{type:"mrkdwn", text:$t}},
                  {type:"divider"},
                  {type:"section", fields:[
                    {type:"mrkdwn", text:"*Added*\n```"+$added+"```"},
                    {type:"mrkdwn", text:"*Removed*\n```"+$removed+"```"}
                  ]}
                ]
              }' > payload.json
          else
            # 失敗時はログ本文を貼る
            jq -n --rawfile log "${{ steps.logs.outputs.logfile }}" \
              --arg t "❌ *FAILURE* — ${REPO} ${RUN}\n*Logs (tail)*:" \
              '{
                blocks: [
                  {type:"section", text:{type:"mrkdwn", text:$t}},
                  {type:"section", text:{type:"mrkdwn", text:"```"+$log+"```"}}
                ]
              }' > payload.json
          fi

          echo "ok=1" >> "$GITHUB_OUTPUT"

      - name: Send to Slack
        if: steps.payload.outputs.ok == '1'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          set -euo pipefail
          resp=$(curl -sS -w "\n%{http_code}" -X POST -H 'Content-type: application/json' \
                   --data @payload.json "$SLACK_WEBHOOK_URL")
          body="${resp%$'\n'*}"
          code="${resp##*$'\n'}"
          echo "HTTP $code"
          echo "Response body: $body"
          [ "$code" = "200" ] && [ "$body" = "ok" ]
