name: Sync Google Sheet to GitHub Secret (Hub A -> Target B)

on:
  workflow_dispatch: {}   # 手動実行
  # repository_dispatch:   # Apps Script から起動する場合はこのブロックも残してOK
  #   types: [sheet_updated]

permissions:
  contents: read

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # ✅ gh はプリインストールなので不要
      # - name: Install gh CLI
      #   uses: cli/gh-action@v2

      - name: Show gh version (debug)
        run: gh --version

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install gspread google-auth

      - name: Read value from Google Sheets (no logs)
        id: read
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          # 手動実行時は secrets.* を既定値に、repository_dispatch 時は payload を優先
          SHEET_ID:    ${{ github.event.client_payload.sheet_id    || secrets.SHEET_ID }}
          SHEET_RANGE: ${{ github.event.client_payload.sheet_range || secrets.SHEET_RANGE }}
        run: |
          python - <<'PY'
          import os, json
          import gspread
          from google.oauth2.service_account import Credentials

          creds_info = json.loads(os.environ["GOOGLE_CREDENTIALS"])
          scopes = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
          creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
          gc = gspread.authorize(creds)

          sh = gc.open_by_key(os.environ["SHEET_ID"])
          rng = os.environ["SHEET_RANGE"]

          if "!" in rng:
              ws_name, cell = rng.split("!", 1)
              ws = sh.worksheet(ws_name)
              val = ws.acell(cell).value or ""
          else:
              ws = sh.sheet1
              val = ws.acell(rng).value or ""

          with open("secret_value.txt", "wb") as f:
              f.write((val or "").encode("utf-8"))
          PY

      - name: Update Secret in TARGET repo (B, environment-scoped)
        env:
          GH_TOKEN: ${{ secrets.PAT_FOR_SECRETS }}  # gh が使うトークン（BのSecrets RW権限）
          # 既定は production。payloadがあれば上書き
          ENV_NAME: ${{ github.event.client_payload.target_env || secrets.TARGET_ENV || 'production' }}
          TARGET_OWNER: ${{ github.event.client_payload.target_owner || secrets.TARGET_OWNER || github.repository_owner }}
          TARGET_REPO:  ${{ github.event.client_payload.target_repo  || secrets.TARGET_REPO  }}
          SECRET_NAME:  ${{ github.event.client_payload.secret_name  || secrets.SECRET_NAME  }}
        run: |
          test -n "$TARGET_REPO" || { echo "TARGET_REPO is empty"; exit 1; }
          test -n "$SECRET_NAME" || { echo "SECRET_NAME is empty"; exit 1; }
          test -n "$ENV_NAME"    || { echo "ENV_NAME is empty"; exit 1; }

          # gh は既に入っている。環境スコープのSecretを更新
          cat secret_value.txt | gh secret set "$SECRET_NAME" \
            --env "$ENV_NAME" \
            -R "$TARGET_OWNER/$TARGET_REPO"
