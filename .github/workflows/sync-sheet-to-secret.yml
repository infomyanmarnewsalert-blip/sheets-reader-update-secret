name: Sync Google Sheet to GitHub Secret (Hub A -> Target B)

on:
  workflow_dispatch: {}   # 手動実行
  # repository_dispatch:   # Apps Script から起動する場合はこのブロックも残してOK
  #   types: [sheet_updated]

permissions:
  contents: read
  actions: write   # ← 追加：古いスナップショット削除に必要

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # ✅ gh はプリインストールなので不要
      # - name: Install gh CLI
      #   uses: cli/gh-action@v2

      - name: Show gh version (debug)
        run: gh --version

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install gspread google-auth

      - name: Read all emails from Sheet1!A:A (comma-joined)
        id: read
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          SHEET_ID:    ${{ github.event.client_payload.sheet_id    || secrets.SHEET_ID }}
          SHEET_RANGE: ${{ github.event.client_payload.sheet_range || 'emails!A:A' }}
        run: |
          python - <<'PY'
          import os, json
          import gspread
          from google.oauth2.service_account import Credentials

          creds_info = json.loads(os.environ["GOOGLE_CREDENTIALS"])
          scopes = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
          creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
          gc = gspread.authorize(creds)

          sh = gc.open_by_key(os.environ["SHEET_ID"])
          rng = os.environ.get("SHEET_RANGE", "emails!A:A")

          if "!" in rng:
              ws_name, cell_range = rng.split("!", 1)
              ws = sh.worksheet(ws_name)
          else:
              ws = sh.sheet1
              cell_range = rng

          values = ws.get(cell_range)  # [[val1],[val2],...]
          emails = [row[0].strip() for row in values if row and row[0].strip()]

          joined = ",".join(emails)
          with open("secret_value.txt", "wb") as f:
              f.write(joined.encode("utf-8"))
          PY

      - name: Update Secret in TARGET repo (B, environment-scoped)
        env:
          GH_TOKEN: ${{ secrets.PAT_FOR_SECRETS }}  # gh が使うトークン（BのSecrets RW権限）
          # 既定は production。payloadがあれば上書き
          ENV_NAME: ${{ github.event.client_payload.target_env || secrets.TARGET_ENV || 'production' }}
          TARGET_OWNER: ${{ github.event.client_payload.target_owner || secrets.TARGET_OWNER || github.repository_owner }}
          TARGET_REPO:  ${{ github.event.client_payload.target_repo  || secrets.TARGET_REPO  }}
          SECRET_NAME:  ${{ github.event.client_payload.secret_name  || secrets.SECRET_NAME  }}
        run: |
          test -n "$TARGET_REPO" || { echo "TARGET_REPO is empty"; exit 1; }
          test -n "$SECRET_NAME" || { echo "SECRET_NAME is empty"; exit 1; }
          test -n "$ENV_NAME"    || { echo "ENV_NAME is empty"; exit 1; }

          # gh は既に入っている。環境スコープのSecretを更新
          cat secret_value.txt | gh secret set "$SECRET_NAME" \
            --env "$ENV_NAME" \
            -R "$TARGET_OWNER/$TARGET_REPO"

      # ===== ここから追加：最新スナップショットだけ保持 =====

      - name: Build emails.txt (normalized list for snapshot)
        run: |
          # secret_value.txt を 1行1メールへ変換し、trim → lowercase → unique → sort
          tr ',' '\n' < secret_value.txt \
          | sed 's/^[ \t]*//;s/[ \t]*$//' \
          | awk 'NF' \
          | awk '{print tolower($0)}' \
          | sort -u > emails.txt

      - name: Upload snapshot with run number (keep for diff)
        uses: actions/upload-artifact@v4
        with:
          name: emails-snapshot-${{ github.run_number }}
          path: emails.txt
          if-no-files-found: error
          retention-days: 90   # 最新1つだけ残す前提で、保持は長めに

      - name: Install jq for cleanup
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Cleanup old snapshots (keep only current)
        env:
          GH_TOKEN: ${{ github.token }}   # actions:write 権限が必要
          REPO: ${{ github.repository }}
          CUR_RUN: ${{ github.run_number }}
        run: |
          set -euo pipefail
          cur_name="emails-snapshot-${CUR_RUN}"
          echo "Start cleanup: keep only ${cur_name}"

          # 全ページを取得して、今回以外の emails-snapshot-* の ID を列挙
          gh api -H 'Accept: application/vnd.github+json' \
                 --paginate \
                 "/repos/${REPO}/actions/artifacts?per_page=100" \
          | jq -r --arg cur "$cur_name" '
              select(type=="object" and has("artifacts"))     # 念のため保険
              | .artifacts[]
              | select(.name | startswith("emails-snapshot-") and .name != $cur)
              | .id
            ' \
          | while read -r id; do
              [ -z "${id:-}" ] && continue
              echo "Deleting artifact id=${id}"
              # すでに別実行で消されていても止まらないように続行
              gh api -X DELETE -H 'Accept: application/vnd.github+json' \
                "/repos/${REPO}/actions/artifacts/${id}" || true
            done

          echo "Cleanup complete. Kept: ${cur_name}"
